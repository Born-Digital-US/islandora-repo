<?php

/**
 * @file
 * Contains asu_permissions.module.
 */

use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_node_insert().
 *
 * Alternatively could trigger this with a context reaction.
 */
function asu_permissions_node_insert(NodeInterface $node) {
  if ($node->bundle() == "collection") {
    // Create a new group for the collection.
    $pluginId = 'group_node:' . $node->bundle();
    $col_group = Group::create(['type' => 'collection_group', 'label' => 'Collection ' . $node->id() . ' Group']);
    $col_group->save();
    $col_group->addContent($node, $pluginId);
    $col_group->save();
  }
  elseif ($node->bundle() == 'asu_repository_item') {
    // Add the asu_repository_item to the parent collection's group.
    // We are assumming here one member_of relationship.
    $parent = _get_collection_parent($node);
    if ($parent) {
      $pluginId = 'group_node:' . $node->bundle();
      $group_contents = _get_group($parent);
      if (!empty($group_contents)) {
        foreach ($group_contents as $group_content) {
          /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
          $group = $group_content->getGroup();
          $group->addContent($node, $pluginId);
        }
      }
    }
  }
}

/**
 * Gets the collection parent of an entity.
 */
function _get_collection_parent($entity) {
  $parent = $entity->field_member_of->entity;
  if ($parent) {
    if ($parent->bundle() != "collection") {
      $parent = _get_collection_parent($parent);
    }
    return $parent;
  }
}

/**
 * Gets the groups that an entity belongs to.
 */
function _get_group($entity) {
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($entity);
  return $group_contents;
}

/**
 * Removes an entity from a collection group.
 */
function _remove_object_from_parent_group($entity, $parent) {
  $group_contents = _get_group($entity);
  if (empty($group_contents)) {
    return;
  }
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    if ($group->label() == 'Collection ' . $parent->id() . ' Group') {
      $group_content->delete();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function asu_permissions_node_delete(NodeInterface $node) {
  if ($node->bundle() == "collection") {
    // Delete the collection group.
    $group_contents = _get_group($node);
    if (empty($group_contents)) {
      return;
    }
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $group->delete();
    }
  }
  elseif ($node->bundle() == 'asu_repository_item') {
    $parent = _get_collection_parent($node);
    if ($parent) {
      _remove_object_from_parent_group($node, $parent);
    }
  }
}

/**
 * Add object to group.
 */
function _add_object_to_parent_group($node) {
  $pluginId = 'group_node:' . $node->bundle();
  $group_contents = _get_group($node->get('field_member_of')->entity);

  // Check if the node is already in the group.
  $node_group_contents = _get_group($node);
  if (!empty($node_group_contents)) {
    foreach ($node_group_contents as $gc) {
      $group = $gc->getGroup();
      if ($group->label() == 'Collection ' . $node->get('field_member_of')->entity->id() . ' Group') {
        return;
      }
    }
  }

  if (!empty($group_contents)) {
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $group->addContent($node, $pluginId);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function asu_permissions_node_update(NodeInterface $node) {
  if ($node->bundle() == 'asu_repository_item') {
    $utils = \Drupal::service('islandora.utils');
    if (!$utils->haveFieldsChanged($node, $node->original)) {
      return;
    }
    if ($node->get('field_member_of')->entity && $node->original->get('field_member_of')->entity) {
      if ($node->get('field_member_of')->entity->id() != $node->original->get('field_member_of')->entity->id()) {
        _remove_object_from_parent_group($node, $node->original->get('field_member_of')->entity);
        _add_object_to_parent_group($node);
      }
    }
    elseif (!$node->get('field_member_of')->entity && $node->original->get('field_member_of')->entity) {
      _remove_object_from_parent_group($node, $node->original->get('field_member_of')->entity);
    }
    elseif ($node->get('field_member_of')->entity && !$node->original->get('field_member_of')->entity) {
      _add_object_to_parent_group($node);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function asu_permissions_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // \Drupal::logger('asu permissions')->info("access check for " . $node->id());
  if ($node->bundle() == "collection" || $node->bundle() == "asu_repository_item") {
    $plugin_id = 'group_node:' . $node->bundle();

    $groups = _get_groups_from_node($node);
    // If the node does not belong to any group, we have nothing to say.
    if (empty($groups)) {
      $access_result = AccessResult::neutral();
    }

    // From this point on you need group to allow you to perform the operation.
    switch ($op) {
      case 'view':
        foreach ($groups as $group) {
          if ($node->isPublished()) {
            // \Drupal::logger('asu permissions')->info("parent access: " . $taccess);
            if ($group->hasPermission("view $plugin_id entity", $account)) {
              $parents = _walk_membership($node, []);
              // \Drupal::logger('asu permissions')->info("parents count: " . count($parents));
              if (count($parents) > 0) {
                foreach ($parents as $par) {
                  if ($par->uuid() != $node->uuid()) {
                    // This line enforces if you can't view a parent then you can't view child.
                    $taccess = $par->access('view', $account);
                    // \Drupal::logger('asu permissions')->info("parent access: " . $taccess);
                    $access_result = AccessResult::forbiddenIf($taccess == FALSE);
                  }
                }
              }
              else {
                $access_result = AccessResult::allowed();
              }
            }
          }
          elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
            // This is what gives metadata managers and admins their power.
            $access_result = AccessResult::allowed();
          }
          else {
            // Forbid if not explictly allowed by group. This is powerful.
            $access_result = AccessResult::forbidden();
          }
        }
        break;
    }
  }
  if (isset($access_result)) {
    $access_result->addCacheableDependency($node);
    $access_result->addCacheContexts(['theme']);
    return $access_result;
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_media_access().
 *
 * Which is also hook_entity_type_access().
 */
function asu_permissions_media_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $item = $entity->get('field_media_of')->entity;
  if (!$item) {
    // Return neutral because it isn't an Islandora media - it isn't attached to an item.
    return new AccessResultNeutral();
  }
  if ($account->isAuthenticated() && in_array("administrator", $account->getRoles())) {
    // Allow if admin.
    // TODO potentially do a lookup here for additional all-seeing roles.
    $access_result = AccessResult::allowed();
  }

  if ($entity->hasField('field_access_terms') && $entity->get('field_access_terms')->entity) {
    \Drupal::messenger()->addMessage("has islandora access set");
    $access_term = $entity->get('field_access_terms')->entity->getName();
  }
  else {
    // Assume its public if not access is set.
    $access_term = "Public";
  }

  if (!$account->isAuthenticated() && $access_term != "Public") {
    $access_result = AccessResult::forbidden();
  }

  if (!isset($access_result)) {
    // Depend on the permission of the parent item
    $taccess = $item->access('view', $account);
    \Drupal::logger('asu permissions')->info("parent access: " . $taccess);
    if ($taccess) {

      if ($account->isAuthenticated() && $access_term == "Private") {
        $access_result = AccessResult::forbidden();
        $groups = _get_groups_from_node($item);
        foreach ($groups as $g) {
          if ($g->getMember($account)) {
            $access_result = AccessResult::allowed();
            break;
          }
        }
      }
      else {
        $access_result = AccessResult::forbidden();
      }
    }
    else {
      $access_result = AccessResult::forbiddenIf($taccess == FALSE);
    }

  }
  if (isset($access_result)) {
    $access_result->addCacheableDependency($entity);
    $access_result->addCacheContexts(['theme']);
    return $access_result;
  }
  else {
    return AccessResult::neutral();
  }

}

/**
 * Follows chain of field_member_of links.
 */
function _walk_membership(NodeInterface $entity, $parents) {
  $enarr = [];
  $enarr[] = $entity;

  // Find the next in the chain, if there are any.
  if ($entity->hasField('field_member_of') &&
    !$entity->get('field_member_of')->isEmpty()) {
    $newent = $entity->get('field_member_of')->referencedEntities()[0];
    $new_pars = _walk_membership($newent, $parents);
  }
  if (isset($new_pars)) {
    return array_merge($parents, $new_pars);
  }
  else {
    $newarr = array_merge($parents, $enarr);
    return $newarr;
  }
}

/**
 * Implements hook_file_download.
 */
function asu_permissions_file_download($uri) {
  // @todo
  /* @var \Drupal\file\FileInterface[] $files */
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  foreach ($files as $f) {
    $utils = \Drupal::service('islandora.utils');
    $medias = $utils->getReferencingMedia($f->id());
    if (count($medias) == 0) {
      return NULL;
    }
    foreach ($medias as $mid => $media) {
      // $node = $utils->getParentNode($media);
      if (!$media->access('view')) {
        // if (!$node->access('view')) {
        // If the user isn't allowed to view the media, return -1 to tell
        // Drupal to block access to the file currently being requested.
        return -1;
      }
    }
  }
}

/**
 * Get the groups for a node.
 */
function _get_groups_from_node(EntityInterface $node) {
  // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($node);

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}
