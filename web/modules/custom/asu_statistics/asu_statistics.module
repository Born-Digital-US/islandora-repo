<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Contains asu_statistics.module.
 */

// asu_statistics


/**
 * Implements hook_theme().
 */
function asu_statistics_theme($existing, $type, $theme, $path) {
  return [
    'asu_statistics_chart' => [
      'variables' => [
          'form' => NULL, 
          'download_url' => NULL,
          'download_stat_summary_url' => NULL,
          'total_items' => NULL,
          'stats_table' => NULL, 
          'summary_row' => NULL, 
          'content_counts_table' => NULL,
          'total_collections' => NULL,
          'collections_by_institution' => NULL],
    ],
  ];
}

/**
 * Default preprocessor for the asu_statistics_theme hook.
 */
function template_preprocess_asu_statistics_chart(&$variables) {
  $variables['attributes'] = [
    'id' => ['asu_statistics_chart'],
  ];

  if (!empty(\Drupal::hasService('asu_statistics.datasource.published_nodes_by_month'))) {
    $data_source = \Drupal::service('asu_statistics.datasource.published_nodes_by_month');
  }
  else {
    \Drupal::messenger()->addMessage(t('The report type you last selected is no longer available. Choose another report type, or contact the site administrator.'), 'warning');
    return;
  }
}

/**
 * Implements hook_page_attachments().
 */
function asu_statistics_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'asu_statistics/asu_statistics_css';
  $current_path = \Drupal::service('path.current')->getPath();
  if ($current_path == '/admin/reports/asu_statistics' || (
      (substr($current_path, 1, 11) == 'collections') &&
      (substr($current_path, strlen($current_path) - 10) == 'statistics') )) {
    $report_type = 'published_nodes_by_month';
    if (!empty(\Drupal::hasService('asu_statistics.datasource.published_nodes_by_month'))) {
      $data_source = \Drupal::service('asu_statistics.datasource.published_nodes_by_month');
    }
    else {
      \Drupal::messenger()->addMessage(t('The report type you last selected is no longer available. Choose another report type, or contact the site administrator.'), 'warning');
      return;
    }
  }
}

/**
 * Implements hook_file_download().
 */
function asu_statistics_file_download($uri) {
  if (preg_match('/asu_statistics_/', $uri)) {
    if (\Drupal::currentUser()->hasPermission('view islandora repository reports')) {
      return ['Content-disposition' => 'attachment; filename="' . basename($uri) . '"'];
    }
    else {
      return -1;
    }
  }
  return NULL;
}

function asu_statistics_make_table_rows_from_result($result) {
  $build_output = $rows = [];
  $month_names = [];
  for ($month = 1; $month < 13; $month++) {
    $month_names[$month] = date("F", mktime(0, 0, 0, $month, 10));
  }
  // get all of the rows into an array where each row contains the results for
  // the query result which have records with these years / months.
  $earliest_year = PHP_INT_MAX;
  $latest_year = 0;
  foreach ($result as $child_obj) {
    if ($child_obj->item_year < $earliest_year) {
      $earliest_year = $child_obj->item_year;
    }
    if ($child_obj->item_year > $latest_year) {
      $latest_year = $child_obj->item_year;
    }
    $record_arr = (array)$child_obj;
    $record_arr['created'] = mktime(0, 0, 0, $child_obj->item_month, 10);
    $record_arr['item_month_name'] = $month_names[$child_obj->item_month];
    $pad0_month = (($child_obj->item_month < 10) ? "0" : "") . $child_obj->item_month;
    $rows[$child_obj->item_year . "-" . $pad0_month] = $record_arr;
  }

  // fill any empty months with a 0.
  for ($year = $earliest_year; $year <= $latest_year; $year++) {
    $build_output[$year]['Year'] = $year;
    for ($month = 1; $month < 13; $month++) {
      $pad0_month = (($month < 10) ? "0" : "") . $month;
      $year_month_key = $year . "-" . $pad0_month;
      $month_key = substr($month_names[$month], 0, 3);
      if (!array_key_exists($year_month_key, $rows)) {
        $build_output[$year][$month_key] = 0;
      } else {
        $build_output[$year][$month_key] = $rows[$year_month_key]['items'];
      }
    }
  }
  // now, add a row total at the end.
  foreach ($build_output as $year => $month_data) {
    $row_total = 0;
    $skip_first_cell = TRUE;
    foreach ($month_data as $month_num => $items) {
      $row_total+= ($skip_first_cell) ? 0 : $items;
      $skip_first_cell = FALSE;
    }
    
    $build_output[$year]['Total'] = $row_total;
  }
  return $build_output;
}

function asu_statistics_get_stats($collection_node_id = NULL, $status = TRUE, $count_items = TRUE) {
  $query = \Drupal::database()->select('node_field_data', 'node_field_data');
  $query->addExpression('COUNT(node_field_data.nid)', 'items');
  $query->addExpression('YEAR(FROM_UNIXTIME(node_field_data.created))', 'item_year');
  $query->addExpression('MONTH(FROM_UNIXTIME(node_field_data.created))', 'item_month');
  if ($collection_node_id) {
    $query->join('node__field_member_of', 'node__field_member_of',
        'node__field_member_of.entity_id = node_field_data.nid');
    $query->condition('node__field_member_of.field_member_of_target_id', $collection_node_id);
  }
  if (!$count_items) {
    $query->condition('node_field_data.type', 'collection');
  }
  if ($status) {
    $query->condition('node_field_data.status', 1);
  }  
  $query->groupBy('YEAR(FROM_UNIXTIME(node_field_data.created)), MONTH(FROM_UNIXTIME(node_field_data.created))');
  $result = $query->execute()->fetchAll();

  return asu_statistics_make_table_rows_from_result($result);
}
