<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Contains asu_statistics.module.
 */

// asu_statistics


/**
 * Implements hook_theme().
 */
function asu_statistics_theme($existing, $type, $theme, $path) {
  return [
    'asu_statistics_chart' => [
      'variables' => ['form' => NULL, 'show_csv_link' => NULL, 'stats' => NULL,
        'stats_table' => NULL, 'summary_row' => NULL],
    ],
    'islandora_repository_reports_tips_block' => [
      'variables' => ['content' => NULL],
    ],
  ];
}

/**
 * Default preprocessor for the islandora_repository_reports_theme hook.
 */
function template_preprocess_asu_statistics_tips_block(&$variables) {
  $variables['attributes'] = [
    'id' => ['islandora_repository_reports_tips_content'],
  ];
}

/**
 * Default preprocessor for the asu_statistics_theme hook.
 */
function template_preprocess_asu_statistics_chart(&$variables) {
  $utilities = \Drupal::service('asu_statistics.utilities');
  $variables['attributes'] = [
    'id' => ['asu_statistics_chart'],
  ];

  if (!empty(\Drupal::hasService('asu_statistics.datasource.published_nodes_by_month'))) {
    $data_source = \Drupal::service('asu_statistics.datasource.published_nodes_by_month');
  }
  else {
    \Drupal::messenger()->addMessage(t('The report type you last selected is no longer available. Choose another report type, or contact the site administrator.'), 'warning');
    return;
  }

  // Since the report is generate by calling $utilities->getReportData(),
  // we need a way to avoid calling that method when a user simply views
  // the report page. Tempstore age seems as good as any.
//  if ($utilities->tempstoreIsStale()) {
//    return;
//  }

  if ($data_source->getChartType() == 'html') {
    $variables['html_content'] = $data_source->getData();
    $variables['chart_title'] = $data_source->getChartTitle('');
  }

  if ($variables['show_csv_link']) {
    $default_schema = \Drupal::config('system.file')->get('default_scheme');
    $files_path = \Drupal::service('file_system')->realpath(default_schema . "://");
    $report_type = 'published_nodes_by_month';
    $filename = 'asu_statistics_' . $report_type . '.csv';
    $report_url = file_create_url($default_schema . '://' . $filename);
    $variables['csv_url'] = $report_url;
    // chart_type is 'pie', 'bar', etc from Chart.js, or 'html' for rendered
    // HTML content such as a table or list.
    $variables['chart_type'] = $data_source->getChartType();
  }
}

/**
 * Implements hook_form_form_id_alter().
 */
function asu_statistics_form_asu_statistics_report_selector_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'asu_statistics/asu_statistics_loading_message';
  $utilities = \Drupal::service('asu_statistics.utilities');

  // Determine whether to show the content type list in the
  // report selector form.
  $data_sources = ['published_nodes_by_month']; // $utilities->getServices(TRUE);
  $need_content_type_list = [];
  $do_not_need_content_type_list = ['content_type'];
  foreach ($data_sources as $report_type) {
    $data_source_service_id = 'asu_statistics.datasource.' . $report_type;
    $data_source = \Drupal::service($data_source_service_id);
    if ($data_source->getBaseEntity() == 'node' && !in_array($report_type, $do_not_need_content_type_list)) {
      $need_content_type_list[] = ['value' => $report_type];
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function asu_statistics_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'asu_statistics/asu_statistics_css';
  $asu_utilities = \Drupal::service('asu_statistics.utilities');
  $current_path = \Drupal::service('path.current')->getPath();
  if ($current_path == '/admin/reports/asu_statistics') {
    $report_type = 'published_nodes_by_month'; // $utilities->getFormElementDefault('islandora_repository_reports_report_type', 'mimetype');

    // Since the report is generate by calling $utilities->getReportData(),
    // we need a way to avoid calling that method when a user simply views
    // the report page. Tempstore age seems as good as any.
    //
    // If this is cached, the chart does not get added. Commenting out this logic.
    //    if ($utilities->tempstoreIsStale()) {
    //      return;
    //    }

    if (!empty(\Drupal::hasService('asu_statistics.datasource.published_nodes_by_month'))) {
      $data_source = \Drupal::service('asu_statistics.datasource.published_nodes_by_month');
      $chart_type = $data_source->getChartType();
      if ($chart_type == 'pie') {
        $config = \Drupal::config('islandora_repository_reports.settings');
        $food_chart_type = $config->get('islandora_repository_reports_pie_or_doughnut');
        $pie_chart_data = $asu_utilities->getReportData($report_type);
        $attachments['#attached']['library'][] = 'asu_statistics/asu_statistics_chart';
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_type'] = $food_chart_type;
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_title'] = $pie_chart_data['title'];
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_data'] = $pie_chart_data;
      }
      if ($chart_type == 'bar') {
        $bar_chart_data = $asu_utilities->getReportData($report_type);
        $attachments['#attached']['library'][] = 'asu_statistics/asu_statistics_chart';
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_type'] = 'bar';
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_title'] = $bar_chart_data['title'];
        $attachments['#attached']['drupalSettings']['islandora_repository_reports']['chart_data'] = $bar_chart_data;
      }
    }
    else {
      \Drupal::messenger()->addMessage(t('The report type you last selected is no longer available. Choose another report type, or contact the site administrator.'), 'warning');
      return;
    }
  }
}

/**
 * Implements hook_file_download().
 */
function asu_statistics_file_download($uri) {
  if (preg_match('/asu_statistics_/', $uri)) {
    if (\Drupal::currentUser()->hasPermission('view islandora repository reports')) {
      return ['Content-disposition' => 'attachment; filename="' . basename($uri) . '"'];
    }
    else {
      return -1;
    }
  }
  return NULL;
}

function asu_statistics_make_table_rows_from_result($result) {
  $build_output = $rows = [];
  $month_names = [];
  for ($month = 1; $month < 13; $month++) {
    $month_names[$month] = date("F", mktime(0, 0, 0, $month, 10));
  }
  // get all of the rows into an array where each row contains the results for
  // the query result which have records with these years / months.
  $earliest_year = PHP_INT_MAX;
  $latest_year = 0;
  foreach ($result as $child_obj) {
    if ($child_obj->item_year < $earliest_year) {
      $earliest_year = $child_obj->item_year;
    }
    if ($child_obj->item_year > $latest_year) {
      $latest_year = $child_obj->item_year;
    }
    $record_arr = (array)$child_obj;
    $record_arr['created'] = mktime(0, 0, 0, $child_obj->item_month, 10);
    $record_arr['item_month_name'] = $month_names[$child_obj->item_month];
    $pad0_month = (($child_obj->item_month < 10) ? "0" : "") . $child_obj->item_month;
    $rows[$child_obj->item_year . "-" . $pad0_month] = $record_arr;
  }

  // fill any empty months with a 0.
  for ($year = $earliest_year; $year <= $latest_year; $year++) {
    $build_output[$year]['Year'] = $year;
    for ($month = 1; $month < 13; $month++) {
      $pad0_month = (($month < 10) ? "0" : "") . $month;
      $year_month_key = $year . "-" . $pad0_month;
      $month_key = substr($month_names[$month], 0, 3);
      if (!array_key_exists($year_month_key, $rows)) {
        $build_output[$year][$month_key] = 0;
      } else {
        $build_output[$year][$month_key] = $rows[$year_month_key]['items'];
      }
    }
  }
  // now, add a row total at the end.
  foreach ($build_output as $year => $month_data) {
    $row_total = 0;
    $skip_first_cell = TRUE;
    foreach ($month_data as $month_num => $items) {
      $row_total+= ($skip_first_cell) ? 0 : $items;
      $skip_first_cell = FALSE;
    }
    $build_output[$year]['total'] = $row_total;
  }
  return $build_output;
}

function asu_statistics_get_stats($collection_node_id = NULL) {
  $query = \Drupal::database()->select('node_field_data', 'node_field_data');
  $query->addExpression('COUNT(node_field_data.nid)', 'items');
  $query->addExpression('YEAR(FROM_UNIXTIME(node_field_data.created))', 'item_year');
  $query->addExpression('MONTH(FROM_UNIXTIME(node_field_data.created))', 'item_month');
    if ($collection_node_id) {
    $query->join('node__field_member_of', 'node__field_member_of',
        'node__field_member_of.entity_id = node_field_data.nid');
    $query->condition('node__field_member_of.field_member_of_target_id', $collection_node_id);
  }

  // $query->condition('node_field_data.status', 1);
  $query->groupBy('YEAR(FROM_UNIXTIME(node_field_data.created)), MONTH(FROM_UNIXTIME(node_field_data.created))');
  $result = $query->execute()->fetchAll();
  return asu_statistics_make_table_rows_from_result($result);
}

/**
 * I think the $query is \Drupal\search_api\Query\QueryInterface.
 */
function asu_statistics_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, $query){
  // check to see that this query's options are not set up to be a facets call...
  // the only REST call that I want to impact is the one.
  //  $call_args['params']['fl'] = 'item_id,score,fm_field_placelng';
  // add the correct params in order to get the URL to be like:
  //   q=its_field_ancestors&stats=true&stats.field=its_field_file_size&rows=0
  $searchId = $query->getSearchId();
    //  if ($query->getOption('my_custom_boost')) {
    // If the Search API query has a 'my_custom_boost' option, use the edsimax
    // query handler and add some boost queries.

    /** @var array $solr_field_names
          maps search_api field names to real field names in the Solr index
     */
    $solr_field_names = $query->getIndex()->getServerInstance()->getBackend()->getSolrFieldNames($query->getIndex());
    \Drupal::logger('asu_statistics')->info(print_r($solr_field_names, TRUE));
/*

Array ( 
    [search_api_relevance] => score 
    [search_api_random] => random 
    [boost_document] => boost_document 
    [all_subjects] => sm_all_subjects 
    [alternate_family_name] => sm_alternate_family_name 
    [alternate_given_name] => sm_alternate_given_name 
    [alternate_middle_name] => sm_alternate_middle_name 
    [asu_agent_aut] => sm_asu_agent_aut 
    [asu_agent_ths] => sm_asu_agent_ths 
    [asu_doi] => sm_asu_doi 
    [asu_isbn] => sm_asu_isbn 
    [asu_issn] => sm_asu_issn 
    [asu_local] => sm_asu_local 
    [author] => ss_author 
    [changed] => ds_changed 
    [complex_title] => tm_X3b_und_complex_title 
    [created] => ds_created 
    [description] => tm_X3b_und_description 
    [etdf_created_year_only] => itm_etdf_created_year_only 
    [field_additional_memberships] => itm_field_additional_memberships 
    [field_ancestors] => itm_field_ancestors 
    [field_cat_date_begin] => ss_field_cat_date_begin 
    [field_cat_date_end] => ss_field_cat_date_end 
    [field_combined_member_of] => itm_field_combined_member_of 
    [field_copyright_statement] => itm_field_copyright_statement 
    [field_corp_alt_name] => tm_X3b_und_field_corp_alt_name 
    [field_description] => ss_field_description 
    [field_display_hints] => itm_field_display_hints 
    [field_edited_text] => tm_X3b_und_field_edited_text 
    [field_edition] => sm_field_edition 
    [field_edtf_copyright_date] => ss_field_edtf_copyright_date 
    [field_edtf_date] => sm_field_edtf_date 
    [field_edtf_date_created] => sm_field_edtf_date_created 
    [field_edtf_date_issued] => sm_field_edtf_date_issued 
    [field_embargo_release_date] => ds_field_embargo_release_date 
    [field_extent] => sm_field_extent 
    [field_file_size] => itm_field_file_size 
    [field_frequency] => ss_field_frequency 
    [field_geo_alt_name] => tm_X3b_und_field_geo_alt_name 
    [field_geographic_subject] => itm_field_geographic_subject 
    [field_handle] => ss_field_handle 
    [field_identifier_value] => tm_X3b_und_field_identifier_value 
    [field_issuance] => ss_field_issuance 
    [field_language_description_1] => sm_field_language_description_1 
    [field_linked_agent] => sm_field_linked_agent 
    [field_local_identifier] => sm_field_local_identifier 
    [field_main_title] => sm_field_main_title 
    [field_member_of] => sm_field_member_of 
    [field_mime_type] => sm_field_mime_type 
    [field_model] => itm_field_model 
    [field_note] => sm_field_note 
    [field_open_access] => bs_field_open_access 
    [field_peer_reviewed] => bs_field_peer_reviewed 
    [field_pid] => ss_field_pid 
    [field_place_published] => sm_field_place_published 
    [field_preferred_citation] => tm_X3b_und_field_preferred_citation 
    [field_related_item] => itm_field_related_item 
    [field_related_item_name] => sm_field_related_item_name 
    [field_reuse_permissions] => itm_field_reuse_permissions 
    [field_rich_description] => tm_X3b_und_field_rich_description 
    [field_series] => sm_field_series 
    [field_statement_responsibility] => tm_X3b_und_field_statement_responsibility 
    [field_subjects_name] => itm_field_subjects_name 
    [field_table_of_contents] => tm_X3b_und_field_table_of_contents 
    [field_tags] => itm_field_tags 
    [field_temporal_subject] => itm_field_temporal_subject 
    [field_title_subject] => itm_field_title_subject 
    [field_topical_subject] => itm_field_topical_subject 
    [genre_name] => sm_genre_name 
    [institution_from_collection] => sm_institution_from_collection 
    [name] => tm_X3b_und_name 
    [nid] => its_nid 
    [node_grants] => sm_node_grants 
    [note_value] => sm_note_value 
    [place_of_publication_code] => sm_place_of_publication_code 
    [preferred_family_name] => ss_preferred_family_name 
    [preferred_given_name] => ss_preferred_given_name 
    [preferred_middle_name] => ss_preferred_middle_name 
    [rendered_item] => tm_X3b_und_rendered_item 
    [resource_type_name] => ss_resource_type_name 
    [status] => bs_status 
    [sticky] => bs_sticky 
    [title] => ss_title 
    [type] => ss_type 
    [uid] => its_uid 
    [search_api_id] => ss_search_api_id 
    [search_api_datasource] => ss_search_api_datasource 
    [search_api_language] => ss_search_api_language ) 
 */    
    /** @var \Solarium\Component\EdisMax $edismax */
    $edismax = $solarium_query->getEDisMax();

    $keys = $query->getKeys();
    if (is_array($keys)) {
      $keys = implode(' ', $keys);
    }

    // $boost_functions = 'recip(abs(ms(NOW/HOUR,' . $solr_field_names['modified'] . ')),3.16e-11,1,.4)^3';
    // $edismax->setBoostFunctions($boost_functions);

    // Avoid the conversion into a lucene parser expression, keep edismax.
    // if this is a collection statistics call, the q should bind 
    // its_field_ancestors to the node's id of the collection
    $solarium_query->setRows(0);
    $solarium_query->addParam('q', 'its_field_ancestors:' . 2);
    $solarium_query->addParam('stats', 'true');
    $solarium_query->addParam('stats.field', 'its_field_file_size');
    $solarium_query->addParam('rows', '0');

    \Drupal::logger('asu_statistics')->info(print_r($solarium_query->getParams(), TRUE));
    
  //  $solarium_query->addParam('rows', 0);
//    $solarium_query->addParam('defType', 'edismax');
// }
  
}