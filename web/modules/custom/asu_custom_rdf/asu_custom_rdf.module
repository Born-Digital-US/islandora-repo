<?php
use Drupal\jsonld\Normalizer\NormalizerBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_rdf_namespaces().
 */
function asu_custom_rdf_rdf_namespaces() {
  return [
    'mods' => 'http://www.loc.gov/mods/modsrdf/v1#',
    'rdau' => 'http://www.rdaregistry.info/Elements/u#',
    'asu' => 'http://repository.asu.edu/rdf/',
    'bf' => 'http://id.loc.gov/ontologies/bibframe/',
  ];
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function asu_custom_rdf_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  if (isset($normalized['@graph']) && is_array($normalized['@graph'])) {
    $current_rdf_mapping = $context['current_entity_rdf_mapping']->get('fieldMappings');
    \Drupal::logger('asu custom')->info(print_r($current_rdf_mapping, TRUE));
    foreach ($normalized['@graph'][0] as $gk => $gv) {
      // Clean up the UID.
      $predicate = $current_rdf_mapping['uid']['properties'][0];
      $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
      if ($gk === $predicate_normalized) {
        foreach ($gv as $k => $id) {
          if (array_key_exists('@value', $id) && array_key_exists('@id', $id) && (strpos($id['@id'], 'user') !== FALSE)) {
            unset($id['@id']);
            $gv[$k] = $id;
          }
        }
        $normalized['@graph'][0][$gk] = $gv;
      }

    }
    foreach ($entity->getFieldDefinitions() as $field => $field_definition) {
      if ($field_definition->getType() == 'entity_reference_revisions') {
        // Its a paragraph - get RDF mapping and apply custom transformations.
        foreach ($entity->get($field)->getValue() as $value) {
          $paragraph = Paragraph::load($value['target_id']);
          // \Drupal::logger('asu custom')->info(print_r($current_rdf_mapping, TRUE));
          if (array_key_exists($field, $current_rdf_mapping)) {
            // \Drupal::logger('asu custom')->info($field);
            $mapping = $current_rdf_mapping[$field];
            foreach ($mapping['properties'] as $predicate) {
              // \Drupal::logger('asu custom')->info(print_r($mapping, TRUE));
              // \Drupal::logger('asu custom')->info($field . " has an RDF mapping of " . $predicate);
              $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
              // Replace existing values.
              $normalized['@graph'][0][$predicate_normalized] = [[
                '@value' => call_user_func($mapping['datatype_callback']['callable'], $paragraph, $mapping['datatype_callback']['arguments']),
                '@language' => 'en',
              ],
              ];
            }
          }
        }
      }
    }
    // Remove empty IDs created by the paragraph entities
    if (count($normalized['@graph']) > 1) {
      foreach ($normalized['@graph'] as $key => $grph) {
        if ($key > 0 && $grph['@id'] === "") {
          unset($normalized['@graph'][$key]);
        }
      }
    }
  }
}
