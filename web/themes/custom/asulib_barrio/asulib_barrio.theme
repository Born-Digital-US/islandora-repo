<?php

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function asulib_barrio_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}

function asulib_barrio_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    // Add the node title to breadcrumbs as plain text.
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_route = \Drupal::service('current_route_match')->getRouteName();
    $search_param_name = ($current_route == 'repo_bento_search.search_page') ?
      'q' : 'search_api_fulltext';
    $search_term = \Drupal::request()->query->get($search_param_name);
    if ($node) {
      $request = \Drupal::request();
      $route_match = \Drupal::routeMatch();
      $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
      if ($current_route == 'view.solr_search_content.page_2') {
        $variables['breadcrumb'][] = [
          'text' => ($search_term) ? 'Search for "' . $search_term . '"' : 'Explore media',
          'attributes' => new Attribute(['class' => ['is_active']])
        ];
      }
      elseif (!empty($page_title)) {
        $variables['breadcrumb'][] = [
          'text' => $page_title,
          'attributes' => new Attribute(['class' => ['is_active']])
        ];
      }
    } elseif ($current_route == 'asu_item_extras.complex_object_members') {
        $variables['breadcrumb'][] = [
          'text' => t('Associated media'),
          'attributes' => new Attribute(['class' => ['is_active']])
        ];
    } else {
      // Add the search text as a text-breadcrumb as text.
      if ($search_term && $search_term != "") {
        $variables['breadcrumb'][] = [
          'text' => 'Search for "' . $search_term . '"',
          'attributes' => new Attribute(['class' => ['is_active']])
        ];
      }
    }
  }
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_preprocess_node()
 * Builds OAI link out of site URL elements
 */
function asulib_barrio_preprocess_node(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  if (!is_object($node) && is_string($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if ($node && $node->getType() == 'asu_repository_item') {
    $site_url = \Drupal::urlGenerator()->generateFromRoute('<front>', [], ['absolute' => TRUE]);
    $url_parts = explode('/', $site_url, -1);
    $domain = $url_parts[2];
    $variables['oai_base_url'] = $site_url . 'oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:' . $domain . ':node-';
  }
}

/**
 * Implements hook_preprocess_paragraph()
 * Converts typed identifiers for DOI into links based on our use cases.
 */
function asulib_barrio_preprocess_paragraph(&$variables) {
  \Drupal::logger('asulib barrio')->info('paragraph->id() = ' . $variables['paragraph']->id());
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'typed_identifier' && $paragraph->hasField('field_identifier_type') &&
    !is_null($paragraph->get('field_identifier_type')->referencedEntities()[0]) &&
    $paragraph->get('field_identifier_type')->referencedEntities()[0]->label() == 'Digital object identifier') {
    $identifier_value = $paragraph->get('field_identifier_value')->value;
    // If the value has http:// or https:// then use that link value, else
    // create a link that is https://doi.
    preg_match_all('/^http(s?):\/\//m', $identifier_value, $matches, PREG_SET_ORDER, 0);
    \Drupal::logger('asulib barrio')->info('$matches = ' . print_r($matches, true));
    if (count($matches) > 0) {
      // Value is a link already.
      $url = Url::fromUri($identifier_value);
      $variables['DOI_link'] = Link::fromTextAndUrl($identifier_value, $url);
    }
    else {
      $url = Url::fromUri('https://doi.org/' . $identifier_value);
      $variables['DOI_link'] = Link::fromTextAndUrl($identifier_value, $url);
    }
 //    if (strstr($identifier_value, ))
    \Drupal::logger('asulib barrio')->info('$identifier_value = ' . $identifier_value);
  }
}

/**
 * Implements hook_theme_suggestions_field_alter()
 * Add view mode to theme suggestions for fields
 */
function asulib_barrio_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__node__' .
      $variables['element']['#field_name'] . '__' .
      $variables['element']['#bundle'] . '__' .
      $variables['element']['#view_mode'];
  $suggestions[] = 'field__node__' .
      $variables['element']['#bundle'] . '__' .
      $variables['element']['#view_mode'];
}

/**
 * Process block content
 */
function asulib_barrio_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'asu_item_is_part_of') {
    $variables['is_metadata_page'] = (\Drupal::routeMatch()->getRouteName() == "asu_item_extras.full_metadata_view");
  }
}
